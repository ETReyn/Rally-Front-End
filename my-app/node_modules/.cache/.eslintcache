[{"/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/index.tsx":"1","/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/reportWebVitals.ts":"2","/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/App.tsx":"3","/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/Data.tsx":"4","/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/component/Velocity/Velocity.tsx":"5","/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/component/History/History.tsx":"6","/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/component/Breakdown/Breakdown.tsx":"7","/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/component/Bar.tsx":"8","/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/component/HistoricalWorkBreakdown.tsx":"9","/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/component/WorkBreakdown.tsx":"10","/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/api/api.ts":"11"},{"size":554,"mtime":1682267578845,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":1682267578845,"results":"14","hashOfConfig":"13"},{"size":774,"mtime":1690930081101,"results":"15","hashOfConfig":"13"},{"size":1365,"mtime":1690942208324,"results":"16","hashOfConfig":"13"},{"size":1735,"mtime":1693273740801,"results":"17","hashOfConfig":"13"},{"size":3879,"mtime":1690930669176,"results":"18","hashOfConfig":"13"},{"size":2338,"mtime":1690930591757,"results":"19","hashOfConfig":"13"},{"size":2608,"mtime":1693273855151,"results":"20","hashOfConfig":"13"},{"size":4149,"mtime":1690929890361,"results":"21","hashOfConfig":"13"},{"size":2488,"mtime":1683848699828,"results":"22","hashOfConfig":"13"},{"size":914,"mtime":1690929519026,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"1osu9kz",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"27"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"27"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"27"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"27"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/index.tsx",[],[],[],"/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/reportWebVitals.ts",[],[],"/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/App.tsx",[],[],"/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/Data.tsx",["63","64","65","66","67","68","69","70","71"],[],"import React, { useRef } from 'react';\nimport { useEffect, useState } from 'react';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n} from 'chart.js/auto';\nimport './App.css';\nimport { UserVelocity } from './component/Bar';\nimport { WorkBreakdownByIteration } from './component/WorkBreakdown';\nimport { HistoricalWorkBreakdown } from './component/HistoricalWorkBreakdown';\nimport { velocity } from './interfaces/interface';\nimport { ArrayDestructuringAssignment } from 'typescript';\nimport { NavigateFunction, useNavigate } from 'react-router-dom';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip\n);\n\n\nfunction Data() {\n\n    const navigate = useNavigate();\n\n\n   const handleVelocityClick = () => {\n    navigate(\"/velocity\");\n  }\n\n const handleHistoryClick = () => {\n    navigate(\"/history\");\n  }\n\n const handleBreakdownClick = () => {\n    navigate(\"/breakdown/499934827772\");\n }\n\n\n  return (\n    <div className=\"App\">\n      <div>\n        <button onClick={ handleVelocityClick }>Get Velocity Data</button>\n        </div>\n        <div>\n        <button onClick={ handleHistoryClick }>Get Historical Data</button>\n        </div>\n        <div>\n        <button onClick={ handleBreakdownClick }>Get Most Recent Iteration Data</button>\n      </div>\n    </div>\n  );\n}\n\n\nexport default Data;\n","/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/component/Velocity/Velocity.tsx",["72"],[],"/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/component/History/History.tsx",["73"],[],"import { useEffect, useState } from \"react\";\nimport { dataInterface } from \"../../interfaces/interface\";\nimport { getHistoricalData, getRecentIteration } from \"../../api/api\";\nimport { useNavigate } from \"react-router-dom\";\nimport { HistoricalWorkBreakdown } from \"../HistoricalWorkBreakdown\";\n\nexport function HistoricalData() {\n    const navigate = useNavigate()\n    const c: dataInterface = {\n        iteration: '',\n        storyType: '',\n        totalStories: 0,\n        totalPoints: 0,\n        iterationId:'',\n      }\n\n\n    const [recentIteration, setRecentIteration] = useState<string>('')\n    const [data1, setData1] = useState<dataInterface[]>([c]);\n    const [enhancement, setEnhancement] = useState<number[]>([])\n    const [security, setSecurity] = useState<number[]>([])\n    const [stabilization, setStabilization] = useState<number[]>([])\n    const [feature, setFeature] = useState<number[]>([])\n    const [defect, setDefect] = useState<number[]>([])\n    const [iteration, setIteration] = useState<string[]>([])\n    const [iterationId, setIterationId] = useState<string[]>([])\n\n\n    function uniq(a: string[]) {\n        return Array.from(new Set(a));\n        }\n\n\n        useEffect(() => {\n        let enh: number[] = [];\n        let sec: number[] = [];\n        let sta: number[] = [];\n        let fea: number[] = [];\n        let def: number[] = [];\n        let iter: string[] = [];\n        let iterId: string[] = [];\n        const map1 = new Map();\n        data1.filter(d => {\n            return !(d.iteration.includes(\"PLAN\"))\n        })\n            // .filter(d => {\n            //   return d.iteration.includes(\"2022\") || d.iteration.includes(\"2023\")\n            // })\n            .map(d => {\n            if (d.storyType === \"DEFECT\") {\n                def.push(d.totalStories)\n            }\n            if (d.storyType === \"STABILIZATION\") {\n                sta.push(d.totalStories)\n            }\n            if (d.storyType === \"ENHANCEMENT\") {\n                enh.push(d.totalStories)\n            }\n            if (d.storyType === \"FEATURE\") {\n                fea.push(d.totalStories)\n            }\n            if (d.storyType === \"SECURITY\") {\n                sec.push(d.totalStories)\n            }\n            iter.push(d.iteration)\n            iterId.push(d.iterationId)\n            if (!map1.has(d.iteration)) {\n                map1.set(d.iteration, 0)\n            }\n            const newValue = d.totalStories + map1.get(d.iteration)\n            map1.set(d.iteration, newValue);\n            })\n        setEnhancement(enh);\n        setStabilization(sta);\n        setSecurity(sec);\n        setDefect(def);\n        setFeature(fea);\n        setIteration(uniq(iter));\n        setIterationId(uniq(iterId));\n\n        }, [data1])\n\n\n    function handleHistoricClick() {\n        getHistoricalData().then(json => setData1(json));\n    }\n\n    function handleRecentIteration() {\n        getRecentIteration().then(json => setRecentIteration(json));\n      }\n\n    useEffect(() => {\n        handleHistoricClick()\n        handleRecentIteration()\n    }, [])\n\n    const handleVelocityClick = () => {\n        navigate(\"/velocity\");\n      }\n    \n     const handleBreakdownClick = () => {\n        navigate(`/breakdown/${recentIteration}`);\n    }\n\n    return (\n        <div className=\"App\">\n            <div>\n                <button onClick={ handleVelocityClick }>Get Velocity Data</button>\n                <button onClick={ handleBreakdownClick }>Get Most Recent Iteration Data</button>\n            </div>    \n        <div className=\"screenFiller\">\n            <HistoricalWorkBreakdown\n            enhancements={enhancement}\n            security={security}\n            stabilization={stabilization}\n            defect={defect}\n            feature={feature}\n            iteration={iteration}\n            iterationId={iterationId}\n            />\n        </div>\n      </div>\n    )\n}","/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/component/Breakdown/Breakdown.tsx",["74","75","76","77","78"],[],"import { useEffect, useState } from \"react\";\nimport { breakdownInterface } from \"../../interfaces/interface\";\nimport { getBreakdownData, getRecentIteration } from \"../../api/api\";\nimport { HistoricalWorkBreakdown } from \"../HistoricalWorkBreakdown\";\nimport { WorkBreakdownByIteration } from \"../WorkBreakdown\";\nimport { useNavigate, useParams } from \"react-router-dom\";\n\n\nexport function BreakdownData() {\n\n    const navigate = useNavigate();\n    const [recentIteration, setRecentIteration] = useState<string>('')\n    const id = useParams().id;\n    const g: breakdownInterface = {\n        storyType: 'string',\n        totalStories: 0,\n        totalPoints: 0,\n        iterationName:'',\n      }\n\n    const [data2, setData2] = useState<breakdownInterface[]>([g]);\n    const [x, setX] = useState<string[]>([])\n    const [y, setY] = useState<number[]>([])\n    const [y1, setY1] = useState<number[]>([])\n    const [iterationName, setIterationName] = useState<string>('Getting iteration data...')\n\n  \n    let arr1: number[] = [];\n    let arr3: number[] = [];\n    let arr2: string[] = [];\n  \n    function handleHistory() {\n        getBreakdownData(id).then(json => setData2(json));\n      }\n    function handleRecentIteration() {\n      getRecentIteration().then(json => setRecentIteration(json));\n    }\n\n    useEffect(() => {\n        handleHistory()\n        handleRecentIteration()\n    }, [])  \n  \n    useEffect(() => {\n      data2.map(d => {\n        arr1.push(d.totalStories);\n        arr3.push(d.totalPoints);\n        arr2.push(d.storyType)\n      })\n      setY(arr1);\n      setX(arr2);\n      setY1(arr3);\n      setIterationName(\"Iteration data for \"+data2[0].iterationName)\n    }, [data2])\n\n    const handleVelocityClick = () => {\n        navigate(\"/velocity\");\n      }\n    \n     const handleBreakdownClick = () => {\n        navigate(\"/history\");\n    }\n\n    return (\n      <div className=\"App\">\n        <div>\n          <button onClick={ handleVelocityClick }>Get Velocity Data</button>\n          <button onClick={ handleBreakdownClick }>Get History Data</button>\n        </div>  \n          \n        <div>\n          {iterationName}\n        </div>\n\n        <div className=\"screenFiller\">\n          <WorkBreakdownByIteration\n            storyType={x}\n            totalPoints={y1}\n            totalStories={y} />\n       </div>\n\n      </div>\n    )\n\n}","/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/component/Bar.tsx",["79","80"],[],"/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/component/HistoricalWorkBreakdown.tsx",["81","82","83","84","85","86","87","88"],[],"import {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n    Chart,\n} from 'chart.js';\nimport { MouseEventHandler, useEffect, useState } from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { useNavigate } from 'react-router-dom';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\ninterface handleData {\n    setData3(data:any): any,\n    setVel(val:boolean):any,\n    setHistoric(val:boolean):any,\n    setBreakdown(val:boolean):any,\n  }\n\n\ninterface graphInterface {\n    iteration: string,\n    totalStories: number\n}\ninterface allGraphData {\n    iteration: string[],\n    enhancements: number[],\n    security: number[],\n    feature: number[],\n    defect: number[],\n    stabilization: number[],\n    iterationId: string[]\n}\n\nexport function HistoricalWorkBreakdown(d: allGraphData) {\n    const navigate = useNavigate();\n    const total = d.defect.map((x, index) => {\n        return x + d.enhancements[index] + d.feature[index] + d.security[index] + d.stabilization[index];\n    })\n\n    const data = {\n        labels: d.iteration,\n        datasets: [\n            {\n                stack: \"stack1\",\n                label: 'ENHANCEMENT',\n                data: d.enhancements,\n                // you can set indiviual colors for each bar\n                backgroundColor: [\n                    'rgba(201, 203, 207, 0.2)'\n                ],\n                borderColor: [\n                    'rgb(201, 203, 207)'\n                ],\n                borderWidth: 2,\n            },\n            {\n                stack: \"stack1\",\n                label: 'SECURITY',\n                data: d.security,\n                backgroundColor: [\n                    'rgba(255, 205, 86, 0.2)'\n                ],\n                borderColor: [\n                    'rgb(255, 205, 86)'\n                ],\n                borderWidth: 2,\n            },\n            {\n                stack: \"stack1\",\n                label: 'STABILIZATION',\n                data: d.stabilization,\n                // you can set indiviual colors for each bar\n                backgroundColor: [\n                    'rgba(75, 192, 192, 0.2)'\n                ],\n                borderColor: [\n                    'rgb(75, 192, 192)'\n                ],\n                borderWidth: 2,\n            },\n            {\n                stack: \"stack1\",\n                label: 'DEFECT',\n                data: d.defect,\n                // you can set indiviual colors for each bar\n                backgroundColor: [\n                    'rgba(153, 102, 255, 0.2)'\n                ],\n                borderColor: [\n                    'rgb(54, 162, 235)'\n                ],\n                borderWidth: 2,\n            },\n            {\n                stack: \"stack1\",\n                label: 'FEATURE',\n                data: d.feature,\n                // you can set indiviual colors for each bar\n                backgroundColor: [\n                    'rgba(255, 159, 64, 0.2)'\n                ],\n                borderColor: [\n                    'rgb(255, 159, 64)'\n                ],\n                borderWidth: 2,\n            },\n            // {\n            //     stack: \"stack2\",\n            //     label: 'TOTAL',\n            //     data: total,\n            //     // you can set indiviual colors for each bar\n            //     backgroundColor: [\n            //         'rgba(255, 99, 132, 0.2)'\n            //     ],\n            //     borderColor: [\n            //         'rgb(255, 99, 132)'\n            //     ],\n            //     borderWidth: 1,\n            // }\n        ]\n    };\n\n    return <Bar \n    data={data} \n    options={{\n        onClick: function(evt, element) {\n          if(element.length > 0)\n          {\n            var ind = element[0].index;\n            // if(confirm('Do you want to remove this point?')){\n            //   data.datasets[0].data.splice(ind, 1);\n            //   data.labels.splice(ind, 1);\n            //   }\n            console.log(d)\n            navigate(`/breakdown/${d.iterationId[ind]}`)\n            }\n        }\n        }}  />;\n};","/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/component/WorkBreakdown.tsx",["89","90"],[],"import {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend,\n} from 'chart.js';\nimport { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    BarElement,\n    Title,\n    Tooltip,\n    Legend\n);\n\ninterface graphInterface {\n    storyType: string[],\n    totalStories: number[],\n    totalPoints: number[],\n}\n\nexport function WorkBreakdownByIteration(d: graphInterface) {\n\n    const data = {\n        labels: d.storyType,\n        datasets: [\n            {\n                label: 'Work Breakdown By Story',\n                data: d.totalStories,\n                // you can set indiviual colors for each bar\n                backgroundColor: [\n                    'rgba(255, 99, 132, 0.2)',\n                    'rgba(255, 159, 64, 0.2)',\n                    'rgba(255, 205, 86, 0.2)',\n                    'rgba(75, 192, 192, 0.2)',\n                    'rgba(54, 162, 235, 0.2)',\n                    'rgba(153, 102, 255, 0.2)',\n                    'rgba(201, 203, 207, 0.2)'\n                ],\n                borderColor: [\n                    'rgb(255, 99, 132)',\n                    'rgb(255, 159, 64)',\n                    'rgb(255, 205, 86)',\n                    'rgb(75, 192, 192)',\n                    'rgb(54, 162, 235)',\n                    'rgb(153, 102, 255)',\n                    'rgb(201, 203, 207)'\n                ],\n                borderWidth: 1,\n            },\n            {\n                label: 'Work Breakdown By Points',\n                data: d.totalPoints,\n                // you can set indiviual colors for each bar\n                backgroundColor: [\n                    'rgba(255, 99, 132, 0.2)',\n                    'rgba(255, 159, 64, 0.2)',\n                    'rgba(255, 205, 86, 0.2)',\n                    'rgba(75, 192, 192, 0.2)',\n                    'rgba(54, 162, 235, 0.2)',\n                    'rgba(153, 102, 255, 0.2)',\n                    'rgba(201, 203, 207, 0.2)'\n                ],\n                borderColor: [\n                    'rgb(255, 99, 132)',\n                    'rgb(255, 159, 64)',\n                    'rgb(255, 205, 86)',\n                    'rgb(75, 192, 192)',\n                    'rgb(54, 162, 235)',\n                    'rgb(153, 102, 255)',\n                    'rgb(201, 203, 207)'\n                ],\n                borderWidth: 1,\n            }\n        ]\n    };\n\n    return <Bar data={data} />;\n};","/Users/ethanreynolds/Documents/Pet Projects/Rally/Rally-Front-End/my-app/src/api/api.ts",[],[],{"ruleId":"91","severity":1,"message":"92","line":1,"column":17,"nodeType":"93","messageId":"94","endLine":1,"endColumn":23},{"ruleId":"91","severity":1,"message":"95","line":2,"column":10,"nodeType":"93","messageId":"94","endLine":2,"endColumn":19},{"ruleId":"91","severity":1,"message":"96","line":2,"column":21,"nodeType":"93","messageId":"94","endLine":2,"endColumn":29},{"ruleId":"91","severity":1,"message":"97","line":12,"column":10,"nodeType":"93","messageId":"94","endLine":12,"endColumn":22},{"ruleId":"91","severity":1,"message":"98","line":13,"column":10,"nodeType":"93","messageId":"94","endLine":13,"endColumn":34},{"ruleId":"91","severity":1,"message":"99","line":14,"column":10,"nodeType":"93","messageId":"94","endLine":14,"endColumn":33},{"ruleId":"91","severity":1,"message":"100","line":15,"column":10,"nodeType":"93","messageId":"94","endLine":15,"endColumn":18},{"ruleId":"91","severity":1,"message":"101","line":16,"column":10,"nodeType":"93","messageId":"94","endLine":16,"endColumn":38},{"ruleId":"91","severity":1,"message":"102","line":17,"column":10,"nodeType":"93","messageId":"94","endLine":17,"endColumn":26},{"ruleId":"91","severity":1,"message":"103","line":2,"column":20,"nodeType":"93","messageId":"94","endLine":2,"endColumn":30},{"ruleId":"104","severity":1,"message":"105","line":49,"column":20,"nodeType":"106","messageId":"107","endLine":49,"endColumn":22},{"ruleId":"91","severity":1,"message":"99","line":4,"column":10,"nodeType":"93","messageId":"94","endLine":4,"endColumn":33},{"ruleId":"91","severity":1,"message":"108","line":12,"column":12,"nodeType":"93","messageId":"94","endLine":12,"endColumn":27},{"ruleId":"109","severity":1,"message":"110","line":42,"column":8,"nodeType":"111","endLine":42,"endColumn":10,"suggestions":"112"},{"ruleId":"104","severity":1,"message":"105","line":45,"column":19,"nodeType":"106","messageId":"107","endLine":45,"endColumn":21},{"ruleId":"109","severity":1,"message":"113","line":54,"column":8,"nodeType":"111","endLine":54,"endColumn":15,"suggestions":"114"},{"ruleId":"91","severity":1,"message":"95","line":10,"column":10,"nodeType":"93","messageId":"94","endLine":10,"endColumn":19},{"ruleId":"91","severity":1,"message":"96","line":10,"column":21,"nodeType":"93","messageId":"94","endLine":10,"endColumn":29},{"ruleId":"91","severity":1,"message":"115","line":9,"column":5,"nodeType":"93","messageId":"94","endLine":9,"endColumn":10},{"ruleId":"91","severity":1,"message":"116","line":11,"column":10,"nodeType":"93","messageId":"94","endLine":11,"endColumn":27},{"ruleId":"91","severity":1,"message":"95","line":11,"column":29,"nodeType":"93","messageId":"94","endLine":11,"endColumn":38},{"ruleId":"91","severity":1,"message":"96","line":11,"column":40,"nodeType":"93","messageId":"94","endLine":11,"endColumn":48},{"ruleId":"91","severity":1,"message":"117","line":12,"column":10,"nodeType":"93","messageId":"94","endLine":12,"endColumn":14},{"ruleId":"91","severity":1,"message":"103","line":24,"column":11,"nodeType":"93","messageId":"94","endLine":24,"endColumn":21},{"ruleId":"91","severity":1,"message":"118","line":32,"column":11,"nodeType":"93","messageId":"94","endLine":32,"endColumn":25},{"ruleId":"91","severity":1,"message":"119","line":48,"column":11,"nodeType":"93","messageId":"94","endLine":48,"endColumn":16},{"ruleId":"91","severity":1,"message":"95","line":10,"column":10,"nodeType":"93","messageId":"94","endLine":10,"endColumn":19},{"ruleId":"91","severity":1,"message":"96","line":10,"column":21,"nodeType":"93","messageId":"94","endLine":10,"endColumn":29},"@typescript-eslint/no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","'UserVelocity' is defined but never used.","'WorkBreakdownByIteration' is defined but never used.","'HistoricalWorkBreakdown' is defined but never used.","'velocity' is defined but never used.","'ArrayDestructuringAssignment' is defined but never used.","'NavigateFunction' is defined but never used.","'handleData' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'recentIteration' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleHistory'. Either include it or remove the dependency array.","ArrayExpression",["120"],"React Hook useEffect has missing dependencies: 'arr1', 'arr2', and 'arr3'. Either include them or remove the dependency array.",["121"],"'Chart' is defined but never used.","'MouseEventHandler' is defined but never used.","'Line' is defined but never used.","'graphInterface' is defined but never used.","'total' is assigned a value but never used.",{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},"Update the dependencies array to be: [handleHistory]",{"range":"126","text":"127"},"Update the dependencies array to be: [arr1, arr2, arr3, data2]",{"range":"128","text":"129"},[1380,1382],"[handleHistory]",[1674,1681],"[arr1, arr2, arr3, data2]"]